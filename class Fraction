using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication166
{
    class Program
    {
        static void Main(string[] args)
        {
            Fraction f = new Fraction(3, 4);
            int a = 10;
            Fraction f1 = f * a;
            Fraction f2 = a * f;
            double d = 1.5;
            Fraction f3 = f + d;
            Console.WriteLine("f = {0}",f);
            Console.WriteLine("f1 = {0}", f1);
            Console.WriteLine("f2 = {0}", f2);
            Console.WriteLine("f3 = {0}", f3);
            Fraction f4 = new Fraction(5,7);
            bool b = f3 > f4;
            Console.WriteLine(b);
        }
    }

    sealed class Fraction
    {
        private int ch;
        private int zn;

        public Fraction(int c, int z)
        {
            ch = c;
            zn = z;
        }

        public static Fraction operator +(Fraction left, Fraction right)
        {
            if(left.zn == right.zn)
            {
                int temp = left.ch + right.ch;
                return new Fraction(temp,left.zn);
            }
            else
            {
                int lc,lz,rc,rz;
                lc = left.ch * right.zn;
                lz = left.zn * right.zn;
                rc = right.ch * left.zn;
                rz = right.zn * left.zn;
                int temp = lc + rc;
                return new Fraction(temp,lz);
            }
        }

        public static Fraction operator-(Fraction left, Fraction right)
        {
            if(left.zn == right.zn)
            {
                int temp = left.ch - right.ch;
                return new Fraction(temp,left.zn);
            }
            else
            {
                int lc,lz,rc,rz;
                lc = left.ch * right.zn;
                lz = left.zn * right.zn;
                rc = right.ch * left.zn;
                rz = right.zn * left.zn;
                int temp = lc - rc;
                return new Fraction(temp,lz);
            }
        }

        public static Fraction operator*(Fraction left, Fraction right)
        {
            int ch,zn;
            ch = left.ch * right.ch;
            zn = left.zn * right.zn;
            return new Fraction(ch,zn);
        }

        public static Fraction operator/(Fraction left, Fraction right)
        {
            int ch,zn;
            ch = left.ch * right.zn;
            zn = left.zn * right.ch;
            return new Fraction(ch,zn);
        }

        public static bool operator==(Fraction left, Fraction right)
        {
            if ((Object)right == null || (Object)left == null)
                return false;
            if (ReferenceEquals(left, right))
                return true;
            if (left.ch == right.ch && left.zn == right.zn)
                return true;
            else
                return false;
        }
        public static bool operator!=(Fraction left, Fraction right)
        {
            if (left == right)
                return false;
            else
                return true;
        }

        public static bool operator true(Fraction obj)
        {
            if (obj.ch < obj.zn)
                return true;
            else
                return false;
        }

        public static bool operator false(Fraction obj)
        {
            if (obj)
                return false;
            else
                return true;
        }

        public override bool Equals(Object obj)
        {
            if (obj == null)
                return false;
            Fraction f = obj as Fraction;
            if ((Object)f == null)
                return false;
            return this.ch == f.ch && this.zn == f.zn;
        }

        public override int GetHashCode()
        {
            return zn + ch;
        }

        public static bool operator <(Fraction left, Fraction right)
        {
            if ((Object)left == null || (Object)right == null)
            {
                throw new Exception("Один из операторов ссылается на null");
                return false;
            }
            if (left.zn == right.zn)
            {
                return left.ch < right.ch;
            }
            if (left.ch == right.ch)
            {
                return left.zn > right.zn;
            }
            else
            {
                int lc, lz, rc, rz;
                lc = left.ch * right.zn;
                lz = left.zn * right.zn;
                rc = right.ch * left.zn;
                rz = right.zn * left.zn;

                return lc < rc;
            }
        }
        public static bool operator>(Fraction left, Fraction right)
        {
            if((Object)left == null || (Object)right == null)
            {
                throw new Exception("Один из операторов ссылается на null");
                return false;
            }
            if (left.zn == right.zn)
                return left.ch > right.ch;
            if (left.ch == right.ch)
                return left.zn < right.zn;
            else
            {
                int lc, lz, rc, rz;
                lc = left.ch * right.zn;
                lz = left.zn * right.zn;
                rc = right.ch * left.zn;
                rz = right.zn * left.zn;

                return left.ch > right.ch;
            }
        }

        public static implicit operator Fraction(int a)
        {
            return new Fraction(a, 1);
        }

        public static implicit operator Fraction(double a)
        {
            int c = (int) a / 1;
            int z = (int)((a % (int)a) * 10);
            return new Fraction(c,z);
        }

        public override string ToString()
        {
            return "числитель = " + ch + ", знаменатель = " + zn;
        }
    
    }

}
